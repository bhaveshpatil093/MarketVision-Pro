{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nexport const useConnectionStatus = () => {\n  _s();\n  const [isOnline, setIsOnline] = useState(navigator.onLine);\n  const [connectionType, setConnectionType] = useState(null);\n  const [downlink, setDownlink] = useState(null);\n  const [rtt, setRtt] = useState(null);\n  useEffect(() => {\n    const updateOnlineStatus = () => {\n      setIsOnline(navigator.onLine);\n    };\n    const updateConnectionInfo = () => {\n      if ('connection' in navigator) {\n        const connection = navigator.connection;\n        setConnectionType(connection.effectiveType || connection.type || null);\n        setDownlink(connection.downlink || null);\n        setRtt(connection.rtt || null);\n      }\n    };\n\n    // Initial update\n    updateConnectionInfo();\n\n    // Event listeners\n    window.addEventListener('online', updateOnlineStatus);\n    window.addEventListener('offline', updateOnlineStatus);\n    if ('connection' in navigator) {\n      const connection = navigator.connection;\n      connection.addEventListener('change', updateConnectionInfo);\n    }\n\n    // Cleanup\n    return () => {\n      window.removeEventListener('online', updateOnlineStatus);\n      window.removeEventListener('offline', updateOnlineStatus);\n      if ('connection' in navigator) {\n        const connection = navigator.connection;\n        connection.removeEventListener('change', updateConnectionInfo);\n      }\n    };\n  }, []);\n  return {\n    isOnline,\n    connectionType,\n    downlink,\n    rtt\n  };\n};\n_s(useConnectionStatus, \"UGVa7bSQmieZ2Yb5sEJU2cTpb8A=\");","map":{"version":3,"names":["useState","useEffect","useConnectionStatus","_s","isOnline","setIsOnline","navigator","onLine","connectionType","setConnectionType","downlink","setDownlink","rtt","setRtt","updateOnlineStatus","updateConnectionInfo","connection","effectiveType","type","window","addEventListener","removeEventListener"],"sources":["/Users/bhaveshpatil/Developer/HFT Projects/1. MarketVision Pro/frontend/src/hooks/useConnectionStatus.ts"],"sourcesContent":["import { useState, useEffect } from 'react';\n\ninterface UseConnectionStatusReturn {\n  isOnline: boolean;\n  connectionType: string | null;\n  downlink: number | null;\n  rtt: number | null;\n}\n\nexport const useConnectionStatus = (): UseConnectionStatusReturn => {\n  const [isOnline, setIsOnline] = useState(navigator.onLine);\n  const [connectionType, setConnectionType] = useState<string | null>(null);\n  const [downlink, setDownlink] = useState<number | null>(null);\n  const [rtt, setRtt] = useState<number | null>(null);\n\n  useEffect(() => {\n    const updateOnlineStatus = () => {\n      setIsOnline(navigator.onLine);\n    };\n\n    const updateConnectionInfo = () => {\n      if ('connection' in navigator) {\n        const connection = (navigator as any).connection;\n        setConnectionType(connection.effectiveType || connection.type || null);\n        setDownlink(connection.downlink || null);\n        setRtt(connection.rtt || null);\n      }\n    };\n\n    // Initial update\n    updateConnectionInfo();\n\n    // Event listeners\n    window.addEventListener('online', updateOnlineStatus);\n    window.addEventListener('offline', updateOnlineStatus);\n    \n    if ('connection' in navigator) {\n      const connection = (navigator as any).connection;\n      connection.addEventListener('change', updateConnectionInfo);\n    }\n\n    // Cleanup\n    return () => {\n      window.removeEventListener('online', updateOnlineStatus);\n      window.removeEventListener('offline', updateOnlineStatus);\n      \n      if ('connection' in navigator) {\n        const connection = (navigator as any).connection;\n        connection.removeEventListener('change', updateConnectionInfo);\n      }\n    };\n  }, []);\n\n  return {\n    isOnline,\n    connectionType,\n    downlink,\n    rtt,\n  };\n};\n"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAS3C,OAAO,MAAMC,mBAAmB,GAAGA,CAAA,KAAiC;EAAAC,EAAA;EAClE,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGL,QAAQ,CAACM,SAAS,CAACC,MAAM,CAAC;EAC1D,MAAM,CAACC,cAAc,EAAEC,iBAAiB,CAAC,GAAGT,QAAQ,CAAgB,IAAI,CAAC;EACzE,MAAM,CAACU,QAAQ,EAAEC,WAAW,CAAC,GAAGX,QAAQ,CAAgB,IAAI,CAAC;EAC7D,MAAM,CAACY,GAAG,EAAEC,MAAM,CAAC,GAAGb,QAAQ,CAAgB,IAAI,CAAC;EAEnDC,SAAS,CAAC,MAAM;IACd,MAAMa,kBAAkB,GAAGA,CAAA,KAAM;MAC/BT,WAAW,CAACC,SAAS,CAACC,MAAM,CAAC;IAC/B,CAAC;IAED,MAAMQ,oBAAoB,GAAGA,CAAA,KAAM;MACjC,IAAI,YAAY,IAAIT,SAAS,EAAE;QAC7B,MAAMU,UAAU,GAAIV,SAAS,CAASU,UAAU;QAChDP,iBAAiB,CAACO,UAAU,CAACC,aAAa,IAAID,UAAU,CAACE,IAAI,IAAI,IAAI,CAAC;QACtEP,WAAW,CAACK,UAAU,CAACN,QAAQ,IAAI,IAAI,CAAC;QACxCG,MAAM,CAACG,UAAU,CAACJ,GAAG,IAAI,IAAI,CAAC;MAChC;IACF,CAAC;;IAED;IACAG,oBAAoB,CAAC,CAAC;;IAEtB;IACAI,MAAM,CAACC,gBAAgB,CAAC,QAAQ,EAAEN,kBAAkB,CAAC;IACrDK,MAAM,CAACC,gBAAgB,CAAC,SAAS,EAAEN,kBAAkB,CAAC;IAEtD,IAAI,YAAY,IAAIR,SAAS,EAAE;MAC7B,MAAMU,UAAU,GAAIV,SAAS,CAASU,UAAU;MAChDA,UAAU,CAACI,gBAAgB,CAAC,QAAQ,EAAEL,oBAAoB,CAAC;IAC7D;;IAEA;IACA,OAAO,MAAM;MACXI,MAAM,CAACE,mBAAmB,CAAC,QAAQ,EAAEP,kBAAkB,CAAC;MACxDK,MAAM,CAACE,mBAAmB,CAAC,SAAS,EAAEP,kBAAkB,CAAC;MAEzD,IAAI,YAAY,IAAIR,SAAS,EAAE;QAC7B,MAAMU,UAAU,GAAIV,SAAS,CAASU,UAAU;QAChDA,UAAU,CAACK,mBAAmB,CAAC,QAAQ,EAAEN,oBAAoB,CAAC;MAChE;IACF,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAEN,OAAO;IACLX,QAAQ;IACRI,cAAc;IACdE,QAAQ;IACRE;EACF,CAAC;AACH,CAAC;AAACT,EAAA,CAlDWD,mBAAmB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}